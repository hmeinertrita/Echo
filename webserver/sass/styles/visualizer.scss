/* Welcome to Compass.
 * In this file you should write your main styles. (or centralize your imports)
 * Import this file using the following HTML or equivalent:
 * <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css" /> */

@import "compass/reset";

.canvas {
  align-items: center;
  justify-content: center;
  position: relative;
  display: flex;
  width: 100vw;
  height: 100vh;
}

//Geometry
$edge-count: 3;
$edge-length: 100px;
$bond-angle: acos(-1/3)*1rad;
$edge-base-angle: 360deg/$edge-count;
$edge-c-radius: .5*$edge-length/sin(.5*$edge-base-angle);
$edge-i-radius: .5*$edge-length/tan(.5*$edge-base-angle);
$edge-angle: asin($edge-c-radius/$edge-length);
$cube-edge-length: $edge-length/sqrt(2);
$face-count: 4;
$face-height: $edge-i-radius + $edge-c-radius;
$face-i-radius: $edge-c-radius*tan(asin($edge-i-radius/$face-height)*180deg/pi());
$face-c-radius: sqrt(pow($face-i-radius,2) + pow($edge-c-radius, 2));

//Colours
$base-colour: blue;
$visualizer-colour: cyan;

.polyhedron {
  position: absolute;
  top: 50%;
  left: 50%;
  transform-style: preserve-3d;
  animation: spin 15s ease-in-out infinite;
  @keyframes spin {
    0% {
      transform: rotateX(90deg) rotateY(360deg) rotateZ(0deg);
    }
    25% {
      transform: rotateX(180deg) rotateY(270deg) rotateZ(90deg);
    }
    50% {
      transform: rotateX(0deg) rotateY(60deg) rotateZ(180deg);
    }
    75% {
      transform: rotateX(180deg) rotateY(0deg) rotateZ(270deg);
    }
    100% {
      transform: rotateX(90deg) rotateY(360deg) rotateZ(360deg);
    }
  }
  @keyframes rotate {
    0% {
      transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    }
    100% {
      transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
    }
  }
}

@function edgeLength($added-length) {
  $height: $face-c-radius + $face-i-radius + $added-length;
  //@return sqrt(pow($edge-c-radius,2) + pow($height,2))
  @return $edge-length
}
@function edgeAngle($added-length) {
  $height: $face-c-radius + $face-i-radius + $added-length;
  //@return 1rad/3 + (atan($edge-c-radius/$height) * 1rad)
  @return 1rad/3 + ($edge-angle * 1rad)
}

.edge {
  box-sizing: content-box;
  transform-style: preserve-3d;
  position: absolute;
  border: 1px solid $visualizer-colour;
  --length: $edge-length;
  width: var(--length);
  transform-origin: top left;
  --angle: ((0.5 * pi()) + ($edge-angle * 1rad));

  &.base {
    border: 1px solid $base-colour;
  }

  @for $i from 0 through 2 {
    &__#{$i} {
      transform: rotateZ(120deg * $i) rotateY(var(--angle));
    }
  }
}

.vertex {
  position: absolute;
  transform-style: preserve-3d;
  transform-origin: top left;
  --translate: $face-c-radius;

  &__0 {
    transform: rotateZ(-60deg) translateZ(var(--translate));
  }
  @for $i from 0 through 2 {
    &__#{$i+1} {
      transform: rotateZ(120deg*$i) rotateY($bond-angle) translateZ(var(--translate));

    }
  }
}
